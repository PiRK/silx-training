************
Input/output
************

----

Silx IO
=======

- Provides function to open file data

  - Accessible as HDF5-like objects
  - In read-only
  - Support HDF5 files, Spec files, EDF files (plus format supported by `FabIO`)

- In symbiosis with our widgets

  - HDF5 tree widget
  - DataViewer

- Also contains

  - Maintained `specfilewrapper` class
  - Maintained TIFF and EdfFile reader and writer
  - Spec to HDF5 converter
  - Dictionary dump

----

HDF5 introduction
=================

HDF5 (for Hierarchical Data Format) is a file format to structure and store
data.

- Standard exchange format for heterogeneous data
- Hierarchical collection of data (directory and file, UNIX-like path)

  - **File**: the root of the container
  - **Group**: a grouping structure containing groups or datasets
  - **Dataset**: a multidimensional array of data elements
  - And other features (links, attributes, datatypes)

.. image:: img/hdf5.png

----

HDF5 example
============

Here is an example of file generated by ``pyFAI``.

.. image:: img/hdf5_example.png

----

NeXus introduction
==================

NeXus is a common data format for neutron, x-ray and muon science based on
HDF5.

Set of rules to structure a HDF5 file for interoperability of the data.

We tries to follow NeXus convention to display data or to expose data.

.. image:: img/nexus.png

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Open a file
-----------

   .. code-block:: python

      import silx.io

      # open
      obj = silx.io.open(filename)
      # do your stuff here
      obj.close()


      # or using context manager
      with silx.io.open(filename) as obj:
         # do your stuff here
         # the close is called for you at the end of the with

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Test objects
------------

   .. code-block:: python

      # test object type
      if silx.io.is_file(obj):
         print("this is a root file")

      if silx.io.is_group(obj):
         # BTW a file is a group
         print("this is a group")

      if silx.io.is_dataset(obj):
         print("this is a dataset")

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Node traversal
--------------

   .. code-block:: python

      if silx.io.is_group(obj):
         # it can contains child

         # number of child
         len(obj)

         # iterator on child names
         obj.keys()

         # access to a child
         child = obj["child_name"]

         # access to a child using a path
         child = obj["path/to/a/child"]

         # the path can be absolute
         child = obj["/absolute/path/to/a/child"]

----

Silx IO API
===========

The content of a dataset is a `numpy` data.

Data access
-----------

   .. code-block:: python

      if silx.io.is_dataset(obj):
         # it contains data

         # a dataset provides information to the data
         obj.shape    # multidimentional shape
         obj.size     # amount of items
         obj.dtype    # type of the array

         # copy the full data as numpy array
         data = obj[...]

         # or a part of it (using numpy selector)
         data = obj[1:2, ::3, 7]

         # special case to access to the value of a scalar
         # i.e. a single integer, a single string...
         data = obj[()]

----

Specfile using silx
===================

``Silx`` provides access to spec files using an HDF5-like mapping. It is a
subset of the HDF5 model.

HDF5-like mapping
-----------------

.. image:: img/spech5_arrows.png

----

Specfile using silx
===================

Python example
--------------

   .. code-block:: python

      import silx.io

      h5like = silx.io.open('data/oleg.dat')

      # print available scans
      print(h5like['/'].keys())

      # print available measurements from the scan 94.1
      print(h5like['/94.1/measurement'].keys())

      # get data from measurement
      xdata = h5like['/94.1/measurement/Epoch']
      ydata = h5like['/94.1/measurement/bpmi']

For more information and examples you can read the
silx IO tutorial:
https://github.com/silx-kit/silx-training/blob/master/silx/io/io.pdf

----

EDF using silx
==============

``Silx`` provides access to EDF files using an HDF5-like mapping. It is a
subset of the HDF5 model. It is not done for hi-efficiency computation.

HDF5-like mapping
-----------------

.. image:: img/fabioh5_arrows.png

----

EDF using silx
==============

Reading files
-------------

   .. code-block:: python

      import silx.io.utils

      h5like = silx.io.open("data/medipix.edf")

      # here is the data as a cube using numpy array
      data = h5like["/scan_0/instrument/detector_0/data"]
      # number of frames
      len(data)
      # data of the first image
      data[0]

      # here is names of motors...
      print(h5like["/scan_0/instrument/positioners"].keys())
      # ... counters...
      print(h5like["/scan_0/instrument/measurement"].keys())
      # ... and other metadata
      print(h5like["/scan_0/instrument/detector_0/others"].keys())

----

HDF5 tree
=========

----

Dataviewer
==========

----

Exercise
========
